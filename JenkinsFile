pipeline {
  agent any

  environment {
    SONAR_URL = "http://192.168.131.128:9000"
    GIT_USER_NAME = "noredinbah"
    GIT_USER_EMAIL = "lhrinourdine9@gmail.com"
    SOURCE_REPO = "https://github.com/noredinbah/spring-boot-app.git"
    MANIFEST_REPO = "https://github.com/noredinbah/spring-boot-app-manifests.git"
    MANIFEST_DIR = "spring-boot-app-manifests"
    DOCKER_REGISTRY = "index.docker.io/v1/"
    DOCKER_IMAGE = "noredineba/img-ultimate-cicd:${BUILD_NUMBER}"
    TRIVY_REPORT = "trivy-report.txt"
  }

  stages {
    stage('Checkout Code') {
      steps {
        git branch: 'main', 
             url: "${SOURCE_REPO}",
             credentialsId: 'github'
      }
    }

    stage('Build and Test') {
      steps {
        sh 'mvn clean package'
      }
      post {
        success {
          archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
        }
      }
    }

    stage('Trivy Scan - Maven Build') {
      steps {
        sh "trivy fs --exit-code 0 --severity HIGH,CRITICAL --report summary --output ${TRIVY_REPORT} target/ || true"
      }
    }

    stage('Static Code Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=$SONAR_URL'
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        script {
          if (!fileExists('Dockerfile')) {
            error('Dockerfile not found in root directory')
          }
          sh 'DOCKER_BUILDKIT=1 docker build --pull --no-cache -t ${DOCKER_IMAGE} .'
        }
      }
    }

    stage('Trivy Scan - Docker Image') {
      steps {
        sh "trivy image --exit-code 0 --severity HIGH,CRITICAL --format table --report summary --output ${TRIVY_REPORT} ${DOCKER_IMAGE} || true"
        archiveArtifacts artifacts: "${TRIVY_REPORT}", fingerprint: true
      }
    }

    stage('Push Docker Image') {
      steps {
        script {
          retry(3) {
            docker.withRegistry("https://${DOCKER_REGISTRY}", "docker-cred") {
              docker.image("${DOCKER_IMAGE}").push()
            }
          }
        }
      }
    }

    stage('Update Deployment File and Push Manifests') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GIT_TOKEN')]){
          script {
            sh """
              rm -rf ${MANIFEST_DIR}
              git clone https://${GIT_USER_NAME}:${GIT_TOKEN}@github.com/noredinbah/spring-boot-app-manifests.git ${MANIFEST_DIR}
              cd ${MANIFEST_DIR}
              git config user.email "${GIT_USER_EMAIL}"
              git config user.name "${GIT_USER_NAME}"
              sed -i "s|image: noredineba/img-ultimate-cicd:.*|image: ${DOCKER_IMAGE}|g" deployment.yml
              git add .
              git commit -m "CI: Update deployment to ${DOCKER_IMAGE}"
              git push origin main
            """
          }
        }
      }
    }
  }

post {
  success {
    slackSend (
      channel: '#devops',
      color: '#36a64f',
      tokenCredentialId: 'slack-channel',
      message: "‚úÖ *Pipeline succeeded*\nDocker Image: `${DOCKER_IMAGE}`\nüìé Trivy report incoming..."
    )
    slackUploadFile(
      channel: '#devops',
      credentialId: 'slack-channel',
      filePath: "${TRIVY_REPORT}",
      initialComment: "üìÑ *Trivy Report* for `${DOCKER_IMAGE}`"
    )
  }

  failure {
    slackSend (
      channel: '#devops',
      color: '#ff0000',
      tokenCredentialId: 'slack-channel',
      message: "‚ùå *Pipeline failed at stage `${env.STAGE_NAME}`*\nCheck Jenkins logs for more info."
    )
  }
}
}
